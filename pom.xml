<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>IPWA02</groupId>
  <artifactId>Artikelverwaltung_2_3</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Artikelverwaltung_2_3</name>
  <packaging>war</packaging>
  <description>Projekt aus dem Kurs IPWA02 zu Abschnitt 2.3</description>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.glassfish</groupId>
      <artifactId>javax.faces</artifactId>
      <version>2.2.4</version>
    </dependency>

    <!-- our chosen persistence mechanism (as indicated in persistence.xml) -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-core</artifactId>
      <version>5.3.7.Final</version>
    </dependency>


    <!-- our chosen database (as indicated in persistence.xml) -->
    <!-- A very simple option: H2, a fork of HSQLDB, an inmemory DB which stores its files in SQL
         by doing regular dumps. Same advantages and disadvantages as embedded Derby.
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>1.4.200</version>
    </dependency>-->
    <dependency><!-- using this library, you can use the EmbeddedDriver which mainains a JDBC
       access on top of a storage on local disk.
         The advantange: simplicity (no need of a separate server).
         The disadvantage: concurrent access by several VMs (e.g. an IDE and the servlet-container
           cannot exist. -->
      <groupId>org.apache.derby</groupId>
      <artifactId>derby</artifactId>
      <version>10.15.2.0</version>
    </dependency>
    <!-- The driver for a connection to a remote JavaDB/Derby database throuh sockets.
         This requires the server to be started before a connection is made
         (from the servlet container or from the IDE). -->
    <dependency>
      <groupId>org.apache.derby</groupId>
      <artifactId>derbyclient</artifactId>
      <version>10.15.2.0</version>
    </dependency>


    <!-- JAXB used to be provided (until java8) but needs to be included -->
    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>2.3.0</version>
    </dependency>


    <dependency>
      <groupId>org.primefaces</groupId>
      <artifactId>primefaces</artifactId>
      <version>8.0</version>
    </dependency>

  </dependencies>
  <build>
    <finalName>Artikelverwaltung_2_3</finalName>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>

      <plugin>
        <!-- this webapp can be run with mvn tomcat:run-war -->
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
          <server>localhost</server>
          <port>8081</port>
          <path>/jsf-webapp</path>
          <update>true</update>
        </configuration>
      </plugin>
    </plugins>
  </build>

</project>

